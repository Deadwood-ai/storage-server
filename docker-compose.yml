services:
  storage-api-stable:
    image: ghcr.io/deadwood-ai/storage-api:v0.4.5
    restart: always
    ports:
      - 127.0.0.1:40040:40040
    environment:
      BASE_DIR: /data
      UVICORN_PORT: 40040
      UVICORN_HOST: 0.0.0.0
      UVICORN_ROOT_PATH: /api/v1
      # There has to be a .env file that contains the following two lines
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      METADATA_TABLE: upload_files
    volumes:
      - ./data:/data
  
  storage-api-dev:
    image: ghcr.io/deadwood-ai/storage-api:latest
    restart: always
    ports:
      - 127.0.0.1:40042:40042
    environment:
      BASE_DIR: /data
      UVICORN_PORT: 40042
      UVICORN_HOST: 0.0.0.0
      UVICORN_ROOT_PATH: /api/dev
      # There has to be a .env file that contains the following two lines
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      METADATA_TABLE: upload_files_dev
    volumes:
      - ./dev-data:/data

  processor-dev:
    image: ghcr.io/deadwood-ai/preprocessor:latest
    restart: always
    ports:
      - 127.0.0.1:40080:40080
    environment:
      BASE_DIR: /data
      STORAGE_LOCAL: true
      MAPSERVER_LOCAL: true
      UVICORN_PORT: 40080
      UVICORN_HOST: 0.0.0.0
      UVICORN_ROOT_PATH: /api/dev
      OWS_BASE_URL: https://data.deadtrees.earth/mapserver?
      #PROCESSOR_COMPRESSION: JPEG
      #COMPRESSION_QUALITY: 30
      SCALE_FACTOR: auto

      # These credentials have to be provided in a .env file
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      METADATA_TABLE: upload_files_dev
      PROCESSOR_PASSWORD: ${PROCESSOR_PASSWORD}
    volumes:
      - ./dev-data:/data
  
  mapserver-dev:
    #image: pdok/mapserver
    build:
      context: ./mapserver
      dockerfile: Dockerfile
      args:
        UID: ${UID}
        GID: ${GID}
    restart: always
    ports:
      - 127.0.0.1:8080:80
    environment:
      MS_MAPFILE: /srv/data/MAINFILE.map
      SERVICE_TYPE: WMS
    volumes:
      - ./dev-data/mapfiles:/srv/data
      - ./dev-data/processed:/data/processed

  # create a python container for direct access of the backend
  jupyter:
    build:
      context: ./jupyter
      dockerfile: Dockerfile
    restart: always
    ports:
      - 127.0.0.1:8888:8888
    environment:
      JUPYTER_TOKEN: ${JUPYTER_TOKEN}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      METADATA_TABLE: upload_files_dev
      PROCESSOR_PASSWORD: ${PROCESSOR_PASSWORD}
    volumes:
      - ./dev-data:/data
      - type: bind
        source: /home/mirko/.ssh/id_rsa
        target: /root/.ssh/id_rsa
      - type: bind
        source: /home/mirko/.ssh/id_rsa.pub
        target: /root/.ssh/id_rsa.pub
    command: jupyter notebook --NotebookApp.ip=0.0.0.0 --allow-root --no-browser --NotebookApp.port=8888

  # create a prometheus container for monitoring
  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    user: root
    volumes:
      - ./dev-data/prometheus:/prometheus
      - type: bind
        source: ./prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/etc/prometheus/console_libraries'
#      - '--web.console.templates=/etc/prometheus/consoles'
#      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
